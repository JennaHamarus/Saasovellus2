@page "/"
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<br />
<form @onsubmit="GetDatas">
	<label for="fname">Location</label>
	<input type="text" @bind="location" />
	<input type="button" value="Submit" @onclick="GetDatas">
	@if (forecast != null)
	{
		<p>Currently set to: @forecast.resolvedAddress</p>
	}
</form>
@if (forecast == null)
{
	<p><em>Loading...</em></p>
}
else
{
	@* Jos on objekti, tehää taulukko *@
	int luku = 0;
	string kuvaus;
	String hourMinute = DateTime.Now.ToString("HH");
	<h2>Current weather</h2>
		<div style="    overflow-x: auto;
    white-space: nowrap;">
	<table class="table">
		<thead>
			<tr>
				<th>Date</th>
				<th>Temp. (C)</th>
				<th>Temp. (F)</th>
				<th>Wind</th>
				<th>Rainfall</th>
				<th>Humidity</th>
				<th>Summary</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>@(forecast.days[0].hours[Int32.Parse(hourMinute)].datetime)</td>
				<td>@((int)(((int)forecast.days[0].hours[Int32.Parse(hourMinute)].temp - 32) * 0.555)) °C</td>
				<td>@((int)forecast.days[0].hours[Int32.Parse(hourMinute)].temp) F</td>
				<td>@(forecast.days[0].hours[Int32.Parse(hourMinute)].windspeed)</td>
				<td>@(forecast.days[0].hours[Int32.Parse(hourMinute)].precip) mm</td>
				<td>@(forecast.days[0].hours[Int32.Parse(hourMinute)].humidity)%</td>
				<td>@(forecast.days[0].hours[Int32.Parse(hourMinute)].conditions)</td>
			</tr>
		</tbody>
	</table>
	</div>
	@if (forecast.alerts != null && forecast.alerts.Length > 0)
	{
		<code>Alert: </code>
		for (int i = 0; i < forecast.alerts.Length; i++)
		{
			<code>@forecast.alerts[i].description</code>
			<br />
		}
	}

	<h3>Hourly weather</h3>
		<div style="    overflow-x: auto;
    white-space: nowrap;">
	<table class="table">
		<thead>
			<tr>
				<th>Date</th>
				<th>Temp. (C)</th>
				<th>Temp. (F)</th>
				<th>Wind</th>
				<th>Rainfall</th>
				<th>Humidity</th>
				<th>Summary</th>

			</tr>
		</thead>
		<tbody>
			@foreach (var item in forecast.days[0].hours)
			{
				<tr>
					<td>@(item.datetime)</td>
					<td>@((int)(((int)item.temp - 32) * 0.555)) °C</td>
					<td>@((int)item.temp) F</td>
					<td>@(item.windspeed)</td>
					<td>@(item.precip) mm</td>
					<td>@(item.humidity)%</td>
					<td>@(item.conditions)</td>
				</tr>
				luku++;
			}
		</tbody>
	</table>
	</div>
	<h3>Weekly weather</h3>
	<div style="    overflow-x: auto;
    white-space: nowrap;">
		<table class="table">
			<thead>
				<tr>
					<th>Date</th>
					<th>Min. (°C)</th>
					<th>Max. (°C)</th>
					<th>Rainfall</th>
					<th>Summary</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in forecast.days)
				{
					<tr>
						<td>@(item.datetime)</td>
						<td>@((int)(((int)item.tempmin - 32) * 0.555)) °C</td>
						<td>@((int)(((int)item.tempmax - 32) * 0.555)) °C</td>
						<td>@(item.precip) mm</td>
						<td>@item.description</td>
					</tr>
					luku++;
				}
			</tbody>
		</table>
	</div>

}


@code {
	private WeatherForecast? forecast;


	string? location = "oulu fi";

	public static void GetCoords()
	{

	}

	protected override async Task OnInitializedAsync()
	{
		await GetDatas();
	}

	async Task GetDatas()
	{
		try
		{
			forecast = await Http.GetFromJsonAsync<WeatherForecast>("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/" + @location + "?key=K4JTCCH9FAMCTAY2KB3WGL3AR");
		}
		catch (HttpRequestException e)
		{
			await JsRuntime.InvokeVoidAsync("alert", "City not found\nTry adding city abbreviation as suffix.\nExample: Oulu FI");
		}
	}

	public class WeatherForecast
	{
		public float queryCost { get; set; }
		public float latitude { get; set; }
		public float longitude { get; set; }
		public string resolvedAddress { get; set; }
		public string address { get; set; }
		public string timezone { get; set; }
		public double tzoffset { get; set; }
		public string description { get; set; }

		public Days[] days { get; set; }
		public alert[] alerts { get; set; }
		public stations[] station { get; set; }
		public currentConditions conditions { get; set; }
	}

	public class Days
	{
		public string datetime { get; set; }
		public float datetimeEpoch { get; set; }
		public float tempmax { get; set; }
		public float tempmin { get; set; }
		public float temp { get; set; }
		public float feelslikemax { get; set; }
		public float feelslikemin { get; set; }
		public float feelslike { get; set; }
		public float dew { get; set; }
		public float humidity { get; set; }
		public float precip { get; set; }
		public float precipprob { get; set; }
		public float precipcover { get; set; }
		public string[] preciptype { get; set; }
		public float snow { get; set; }
		public float snowdepth { get; set; }
		public float windgust { get; set; }
		public float windspeed { get; set; }
		public float winddir { get; set; }
		public float pressure { get; set; }
		public float cloudcover { get; set; }
		public float visibility { get; set; }
		public float solarradiation { get; set; }
		public float solarenergy { get; set; }
		public float uvindex { get; set; }
		public float severerisk { get; set; }
		public string sunrise { get; set; }
		public float sunriseEpoch { get; set; }
		public string sunset { get; set; }
		public float sunsetEpoch { get; set; }
		public float moonphase { get; set; }
		public string conditions { get; set; }
		public string description { get; set; }
		public string icon { get; set; }
		public string[] stations { get; set; }
		public string source { get; set; }
		public Hours[] hours { get; set; }
	}

	public class Hours
	{
		public string datetime { get; set; }
		public float datetimeEpoch { get; set; }
		public float temp { get; set; }
		public float feelslike { get; set; }
		public float humidity { get; set; }
		public float dew { get; set; }
		public float precip { get; set; }
		public float precipprob { get; set; }
		public float snow { get; set; }
		public float snowdepth { get; set; }
		public string[] preciptype { get; set; }
		public float windgust { get; set; }
		public float windspeed { get; set; }
		public float winddir { get; set; }
		public float pressure { get; set; }
		public float visibillity { get; set; }
		public float cloudcover { get; set; }
		public float solarradiation { get; set; }
		public float solarenergy { get; set; }
		public float uvindex { get; set; }
		public float severerisk { get; set; }
		public string conditions { get; set; }
		public string icon { get; set; }
		public string[] stations { get; set; }
		public string source { get; set; }
	}

	public class alert
	{
		public string events { get; set; }
		public string headline { get; set; }
		public string ends { get; set; }
		public float endsEpoch { get; set; }
		public string onset { get; set; }
		public float onsetEpoch { get; set; }
		public string id { get; set; }
		public string language { get; set; }
		public string link { get; set; }
		public string description { get; set; }
	}

	public class stations
	{
		public float distance { get; set; }
		public float latitude { get; set; }
		public float longitude { get; set; }
		public float useCount { get; set; }
		public string id { get; set; }
		public string name { get; set; }
		public float quality { get; set; }
		public float contribution { get; set; }
	}

	public class currentConditions
	{
		public string datetime { get; set; }
		public float datetimeEpoch { get; set; }
		public float temp { get; set; }
		public float feelslike { get; set; }
		public float humidity { get; set; }
		public float dew { get; set; }
		public float precip { get; set; }
		public float precipprob { get; set; }
		public float snow { get; set; }
		public float snowdepth { get; set; }
		public string[] preciptype { get; set; }
		public float windgust { get; set; }
		public float windspeed { get; set; }
		public float winddir { get; set; }
		public float pressure { get; set; }
		public float visibillity { get; set; }
		public float cloudcover { get; set; }
		public float solarradiation { get; set; }
		public float solarenergy { get; set; }
		public float uvindex { get; set; }
		public float severerisk { get; set; }
		public string conditions { get; set; }
		public string icon { get; set; }
		public string[] stations { get; set; }
		public string source { get; set; }
	}
}
