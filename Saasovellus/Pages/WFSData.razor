@* @page "/wfsdata"

@using System.Net.Http
@inject HttpClient HttpClient
@using System.Text.Json
@using System.Globalization;
@using System.Linq;
@using static Saasovellus.Pages.CityData;

<CityData Cities="@Cities" />

<select @bind="SelectedCity"> 
    <option value="">Select a city</option>
    @foreach (var city in Cities) // Populoidaan dropdown valikko käymällä läpi Cities-lista
    {
            <option value="@city.Latitude,@city.Longitude">@city.Name</option>
    }
</select>

<button class="btn btn-primary" @onclick="CallWFS">Hae viikon säätiedot</button>

@if (weatherData != null) // Renderöidään taulukko
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                @foreach (var hour in Enumerable.Range(0, 24)) // Iteroidaan joka tunnille taulukkoon otsikko
                {
                    <th>@hour:00</th>

                }
            </tr>
        </thead>
            <tbody>
            @foreach (var dateGroup in weatherData.hourly.time.Select((value, index) => new { value, index }).GroupBy(x => DateTime.Parse(x.value).Date)) // Grouping weather data by date
            {
                <tr>
                    <td>@dateGroup.Key.ToString("dddd, dd MMMM yyyy")</td>
                    @foreach (var hour in dateGroup) // Iteroidaan joka tunnille taulukkoon lämpötila
                    {
                        <td>@weatherData.hourly.temperature_2m[hour.index]</td>
                    }
                </tr>
            }
            </tbody>
    </table>
}

@code {
    private string wfsUrl = "https://api.open-meteo.com/v1";
    private string wfsRequest = "Describe";
    private WeatherData weatherData; // Tässä pidetään sään data
    private string SelectedCity { get; set; } //Dropdownin valittu kunta

    [Inject]
    private CityData CityData { get; set; } //CityData inject
    private List<City> Cities { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //Hae cities
        Cities = await CityData.GetCitiesAsync();
    }

    private async Task<string> GetWFSDataAsync(string latitude, string longitude) //Tällä metodilla haetaan säädata käyttäen koordinaatteja
    {
        try
        {
//<<<<<<< locationSearch
//            // HttpResponseMessage response = await HttpClient.GetAsync(wfsUrl + "?" + wfsRequest);
//            HttpResponseMessage response = await HttpClient.GetAsync("sample-data/weather.json");
//            response.EnsureSuccessStatusCode(); // Tarkista, että pyyntö onnistui
//=======
            //Määritellään API URL
            string apiUrl = $"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&hourly=temperature_2m&timezone=auto";

            //HTTP GET request
            HttpResponseMessage response = await HttpClient.GetAsync(apiUrl);
            response.EnsureSuccessStatusCode();
//>>>>>>> dev
            string responseData = await response.Content.ReadAsStringAsync();
            return responseData;
        }
        catch (Exception ex)
        {
            return $"Virhe: {ex.Message}";
        }
    }

    private async Task CallWFS()
    {
        if (!string.IsNullOrEmpty(SelectedCity)) //Check et onko kunta valittu
        {
            var coordinates = SelectedCity.Split(","); //Jaa SelectedCity:stä tulevat koordinaatit
            string latitude = coordinates[0];
            string longitude = coordinates[1];
            string wfsData = await GetWFSDataAsync(latitude, longitude); //Hae säädata
            weatherData = JsonSerializer.Deserialize<WeatherData>(wfsData);
        }
    }

    public class WeatherData
    {
        public HourlyData hourly { get; set; }
        public class HourlyData
        {
            public List<string> time { get; set; }
            public List<double> temperature_2m { get; set; }
        }
    }
}
 *@